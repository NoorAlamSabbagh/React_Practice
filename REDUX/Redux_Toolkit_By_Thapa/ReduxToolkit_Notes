//<=========What is Redux Toolkit==========>
(1)Redux Toolkit is an official toolset from the Redux team that makes working with Redux easier and less time-consuming.

(2)Instead of doing everything manually-like creating actions, reducers, and managing state immutability-RTK gives you
built in functions that handles most of the work for you.

(3)In simpler terms, its a shortcut that helps you manage your app's state with code and fewer mistakes.
The goal is to make Redux more begineer friendly thatreduce the amount of code you need to write.

//<===========Why is Redux ToolKit=============>
(1)Less Boilerplate: In Traditional Redux, You write a lot of repetitive code just to get basic things done.
RTK cuts down on all that extra code and gives cleaner and simpler way to manage state.

(2)Simpler Setup: It also automatically sets up your store, adds some middleware for things like async actions, and even connects you to Redux Dev Tools for debugging without extra configuration.

(3)Built-In Async Handing: If you have ever used Redux Thunk for async tasks like fetch data from API, RTK 
has a built in feature called createAsync Thunk that makes even easier to handle async actions.

//<=======Setup and Steps I have follow using Redux Toolkit===========>
//(1)Steps: npm i redux@tolkit
export const store = configureStore({
    reducer: {
        // taskReducer: taskReducer,
         taskReducer,
    },
})

//(2)Steps:Lec2:CreateSlice in Redux Toolkit: Simplifying Action Creators And Reducers
<=======RTK createSlice=========>
//In Redux Toolkit(RTK): createSlice is a utility function that simplifies the process of creating a Redux slice of state.
It combines actions and Reducersinto a single object. making the setup of Redux state management more streamlined and organized.

A slice is essentially a section of the Redux state, along with the actions and reducers that operate on it.
Using createSlice You can define:
* The initial state of the slice
* Reducers that definehoe the state changes in respone to actions.
* Action creators automatically generated based on reducer names.

//
//Lec: Steps to Connect
* Install react-redux 
npm install react-redux
* Wrap the app with the Provider
Use the Provider component to pass the Redux store to the entire app.

//
//Lec: Access Redux Toolkit Store Data in React
//Access Redux State in React using useSelector
* Use the useSelector hook to read data from the Redux store.
const count = useSelector(state => state.property);
Selector function: We define a selector function that takes the entire Redux store state as an argument
and returns the specific piece of data we need.

//
//Lecture: Dispatch Actions in React using useDispatch
* Use the useDispatch hook to dispatch actions from a React component


//
//Lecture: RTK Folder Structure
src
|-app
|  |-store.js
|- features
|   |-tasks
|      |- taskSlice.js
|      |- tasAction.js
|      |- taskSelector.js
|      |- taskAPI.js
|
| - index.js

# Redux store configuration
# The tasks slice
# Action creators (optional if needed seperately)
# Selectors (if you have complex selectors)
# Async API calls (if using RTK query or other async logic)
# Root entry file


//////////////////////////////
# Configures the Redux store

src
|-app
|  |-store.js
|- features
|   |-products
|   |  |- productSlice.js
|   |  |- productAPI.js
|   |  |- productSelector.js
|   |  |- productList.js
|   |
|   |-cart
|   |  |- cartSlice.js
|   |  |- cartSelector.js
|   |  |- cart.js
|   |
|   |-user
|   |  |- userSlice.js
|   |  |- userAPI.js
|   |  |- userSelector.js
|   |  |- userProfile.js
|   |
|   |-orders
|   |  |- orderSlice.js
|   |  |- orderAPI.js
|   |  |- orderSelector.js
|   |  |- orderSummary.js
|   |
| - index.js

# Handles product data(list, details, etc.)
# Manages product related async actions (e.g. fetching products)
# Selectors to access product data from the store
# Component to display list of products

# Manages cart state (add, remove, update, quantity)
# Selectors for cart data (total price, item count, etc)
# Component to display the cart

# Manages user auth state (login, logout, registeration)
# Manages async actions like login logout
# Selectors for accessing user data
# Component to display user profile info

# Manages order-related state(order list, status)
# Async actions like palcing an order
# Selectors to access order data
# Component to display order details
# Root file to render the app